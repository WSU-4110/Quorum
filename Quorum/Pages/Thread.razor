@page "/p/{threadId:int}"
@page "/p/{threadId:int}/{page:int}"

@using QuorumDB.Models
@inject AuthenticationStateProvider _auth
@inject Quorum.Data.ApplicationDbContext _context
@inject IForumData _fdata
@inject IThreadData _tdata
@inject IReplyData _rdata
@inject IUserData _udata
@inject UserState _ustate
@inject IJSRuntime _js
@inject NavigationManager NavManager

<div class="panel panel-default">
    <div class="posts">
        <ul>
            @if (loading)
            {
                <li id="loading" class="postwrapper">
                    <div class="postmessage">Loading Data...</div>
                </li>
            }
            else
            {
                <li id="title"><h2>@thread.Title</h2></li>
                <li id="replybutton">
                    <div class="threadcontrols">
                        <a class="btn btn-outline-dark" role="button" data-toggle="modal" data-target="#createReply">Reply</a>
                    </div>
                </li>
                @if (page == 1)
                {
                    <li id="description" class="postwrapper d-flex">
                        <div class="pr-3">
                            <Avatar UserName="@thread.UserName" />
                        </div>
                        <div>
                            <div class="postdata"> <a href="profile/@thread.UserName">@thread.UserName</a> | Created on @thread.CreatedTime.ToString("G")</div>
                            <div class="postmessage">
                                <Markdown InputText="@thread.Description" />
                            </div>
                        </div>
                    </li>
                }

                @if (replies.Count() == 0)
                {
                    <li id="noposts" class="postwrapper">
                        <div class="postmessage">Currently no replies</div>
                    </li>
                }
                else
                {
                    foreach (var reply in replies)
                    {
                        <li id="threadreply" class="postwrapper d-flex">
                            <div class="pr-3">
                                <Avatar UserName="@reply.UserName" />
                            </div>
                            <div class="container p-0">
                                <div class="postdata pt-1">
                                    <a href="profile/@reply.UserName">@reply.UserName</a> | <time class="timeago" datetime="@reply.CreatedTime.ToString("u")">@reply.CreatedTime.ToString("G")</time>
                                    <AuthorizeView>
                                        @if (context.User.Identity.Name == reply.UserName)
                                        {
                                            <span class="oi oi-circle-x btn float-right p-0" @onclick="() => deleteReply(reply.Id)"></span>
                                        }
                                    </AuthorizeView>
                                </div>
                                <div class="postmessage">
                                    <Markdown InputText="@reply.Text" />
                                </div>
                            </div>
                        </li>
                    }
                }
            }
        </ul>
        @*this is the reply pagination section*@
        @if (numOfPages > 0 && loading == false)
        {
            <ul class="list-group list-group-horizontal">

                @if (pageNum != 1)
                {
                    <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@PrevPage">Prev</button></li>
                    <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@FirstPage">1</button></li>
                    @if (pageNum - 1 > 3)
                    {
                        <li id="replypagination" class="list-group-item">...</li>
                    }
                    @if (pageNum - 1 > 2)
                    {
                        <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@PageBeforePrev">@(pageNum - 2)</button></li>
                    }
                    @if (pageNum > 2)
                    {
                        <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@PrevPage">@(pageNum - 1)</button></li>
                    }
                }
                <li id="replypagination" class="list-group-item"><b>@pageNum</b></li>
                @if (pageNum != numOfPages)
                {
                    <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@NextPage">@(pageNum + 1)</button></li>
                    @if (numOfPages - pageNum > 2)
                    {
                        <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@PageAfterNext">@(pageNum + 2)</button></li>
                    }
                    @if (numOfPages - pageNum > 3)
                    {
                        <li id="replypagination" class="list-group-item">...</li>
                    }
                    @if (numOfPages - pageNum > 1)
                    {
                        <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@LastPage">@numOfPages</button></li>
                    }
                    <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@NextPage">Next</button></li>
                }
            </ul>
         }
    </div>
</div>

@*This is the modal section*@
<AuthorizeView>
    <Authorized Context="Auth">
        <div class="modal fade" id="createReply" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <EditForm EditContext="@EC">
                        <DataAnnotationsValidator />
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">Create Reply</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <div class="form-group">
                                <ValidationSummary />
                                <nav>
                                    <div class="nav nav-tabs" id="nav-tab" role="tablist">
                                        <a class="nav-item nav-link active" id="nav-text-tab" data-toggle="tab" href="#nav-text" role="tab" aria-controls="nav-text" aria-selected="true">Text</a>
                                        <a class="nav-item nav-link" id="nav-preview-tab" data-toggle="tab" href="#nav-preview" role="tab" aria-controls="nav-preview" aria-selected="false">Preview</a>
                                    </div>
                                </nav>
                                <div class="tab-content" id="nav-tabContent">
                                    <div class="tab-pane fade show active" id="nav-text" role="tabpanel" aria-labelledby="nav-text-tab">
                                        <LiveInputText rows="5" id="message-text" placeholder="Message" class="form-control" @bind-Value="replyView.Text" />
                                    </div>
                                    <div class="tab-pane fade" id="nav-preview" role="tabpanel" aria-labelledby="nav-preview-tab">
                                        <Markdown InputText="@replyView.Text" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            @if (string.IsNullOrEmpty(replyView.Text) == false && EC.Validate())
                            {
                                <button type="button" @onclick="HandleValidSubmit" class="btn btn-primary" data-dismiss="modal">Submit</button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-primary">Submit</button>
                            }
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="modal fade" id="createReply" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Create Reply</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Not an authorized user, cannot create a reply</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Dismiss</button>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@functions{
    [Parameter]
    public int threadId { get; set; }

    [Parameter]
    public int page { get; set; } = 1;

    public int pageNum = 1;
    int numOfPages;

    List<ForumReply> replies = new List<ForumReply>();
    ForumThread thread;
    ReplyView replyView = new ReplyView();
    AspNetUser user;
    bool loading = true;
    bool convertedDate = false;

    public EditContext EC { get; set; }

    protected override async Task OnInitializedAsync()
    {
        EC = new EditContext(replyView);

        var threadsList = await _tdata.GetThreadById(threadId);
        thread = threadsList.FirstOrDefault();

        //Only continue if url is valid
        if (threadsList.Count == 0)
            NavManager.NavigateTo("404");

        if (page == 0)
            page = 1;

        await _tdata.IncreaseViewCountById(threadId).ConfigureAwait(false);
        await FetchData();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (!firstRender && !convertedDate)
        {
            thread.CreatedTime = await _ustate.GetLocalDateTime(thread.CreatedTime);

            foreach (var r in replies)
            {
                r.CreatedTime = await _ustate.GetLocalDateTime(r.CreatedTime);
            }
            convertedDate = true;
            StateHasChanged();
            await _js.InvokeVoidAsync("general.initTimeAgo");
        }

        base.OnAfterRender(firstRender);
    }

    private async Task FetchData()
    {
        replies.Clear();
        loading = true;
        replies = await _rdata.GetRepliesByThreadId(threadId, page);
        var replyCount = await _rdata.GetReplyCountByThreadId(threadId);
        numOfPages = replyCount / 10;
        if (replyCount % 10 != 0)
            numOfPages++;
        loading = false;
    }

    private async Task HandleValidSubmit()
    {
        //get current user
        var authenticationState = await _auth.GetAuthenticationStateAsync();
        var userState = authenticationState.User;
        string userName = userState.Identity.Name;
        var userList = await _udata.GetUserByUserName(userName);
        user = userList.FirstOrDefault();

        ForumReply reply = new ForumReply();

        //Assign the view model to the database model
        reply.Text = replyView.Text;
        reply.ThreadId = threadId;
        reply.UserId = user.Id;
        reply.UserName = user.UserName;

        try
        {
            _context.ForumReplies.Add(reply);
            await _context.SaveChangesAsync();

            replyView = new ReplyView();
            EC = new EditContext(replyView);
            await FetchData();
            StateHasChanged();

            await _js.InvokeVoidAsync("general.initTimeAgo");
            await _rdata.UpdateLastActivity(threadId).ConfigureAwait(false);
        }
        catch (Exception e)
        {
            //Suppose to log stuff but we'll do that later
            Console.WriteLine(e.Message);
            StateHasChanged();
        }
    }

    private async Task deleteReply(int replyId)
    {
        await _rdata.DeleteReplyById(replyId);
        await FetchData();
        StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        await FetchData();
        StateHasChanged();
        convertedDate = false;
    }

    private void FirstPage()
    {
        pageNum = 1;
        NavManager.NavigateTo($"/p/{threadId}/{pageNum}");
    }

    private void PageBeforePrev()
    {
        pageNum -= 2;
        NavManager.NavigateTo($"/p/{threadId}/{pageNum}");
    }

    private void PrevPage()
    {
        pageNum -= 1;
        NavManager.NavigateTo($"/p/{threadId}/{pageNum}");
    }

    private void NextPage()
    {
        pageNum += 1;
        NavManager.NavigateTo($"/p/{threadId}/{pageNum}");
    }

    private void PageAfterNext()
    {
        pageNum += 2;
        NavManager.NavigateTo($"/p/{threadId}/{pageNum}");
    }

    private void LastPage()
    {
        pageNum = numOfPages;
        NavManager.NavigateTo($"/p/{threadId}/{pageNum}");
    }
}
