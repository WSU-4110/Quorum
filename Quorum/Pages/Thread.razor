@page "/p/{threadid}"

@using Microsoft.Extensions.Configuration;
@using Microsoft.AspNetCore.Identity
@using QuorumDB.Models
@using Quorum.Data.ViewModels
@using System.Text
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject Quorum.Data.ApplicationDbContext _context
@inject QuorumDB.IForumData _fdata
@inject QuorumDB.IThreadData _tdata
@inject QuorumDB.IReplyData _rdata
@inject QuorumDB.IUserData _udata
@inject NavigationManager NavManager


<div class="panel panel-default">
    <div class="posts">
        <ul>
            @if (replies is null)
            {
                <li id="loading" class="postwrapper">
                    <div class="postmessage">Loading Data...</div>
                </li>
            }
            else
            {
                
                foreach (var thread in threadsList)
                {
                    <li id="title"><h2>@thread.Title</h2></li>
                    <li id="replybutton">
                        <div class="threadcontrols">
                            <a class="btn btn-outline-dark" href="#" role="button" data-toggle="modal" data-target="#createReply">Reply</a>
                        </div>
                    </li>
                    <li id="description" class="postwrapper">
                        <div class="postdata">Profile Pic | @thread.UserName | @thread.CreatedTime</div>
                        <div class="postmessage">@thread.Description</div>
                    </li>
                }
                @if (replies.Count() == 0)
                {
                    <li id="noposts" class="postwrapper">
                        <div class="postmessage">Currently no replies</div>
                    </li>
                }
                else
                {
                    foreach (var reply in replies)
                    {
                        <li id="threadreply" class="postwrapper">
                            <div class="postdata">Profile Pic Here | @reply.UserName | @reply.CreatedTime</div>
                            <div class="postmessage">@reply.Text</div>
                        </li>
                    }
                }
            }
        </ul>
    </div>
</div>

<AuthorizeView>
    <Authorized>
        <div class="modal fade" id="createReply" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Create Reply</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="message-text" class="col-form-label">Text</label>
                                <textarea class="form-control" id="message-text" placeholder="Message" @bind="replyView.Text"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" data-dismiss="modal" @onclick="@HandleValidSubmit">Submit</button>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="modal fade" id="createThread" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Create Thread</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Not an authorized user, cannot create a thread</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@functions{
    [Parameter]
    public string threadid { get; set; } = "threadid";

    private List<ForumReply> replies;
    private List<ForumThread> threadsList;
    private ForumThread thread;
    private ReplyView replyView = new ReplyView();
    private ForumReply reply = new ForumReply();
    private AspNetUser user;

    private async Task FetchData()
    {
        threadsList = await _tdata.GetThreadById(int.Parse(threadid));

        //Only fetch information if the url is valid
        if (threadsList.Count != 0)
        {
            replies = await _rdata.GetRepliesByThreadId(int.Parse(threadid));
        }
        else
        {
            //tell them to screw off
            NavManager.NavigateTo("404");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await FetchData();
    }

    private async void HandleValidSubmit()
    {
        //get current user
        AuthenticationState authenticationState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userState = authenticationState.User;
        string userName = userState.Identity.Name;
        var userList = await _udata.GetUserByUserName(userName);
        user = userList.FirstOrDefault();

        thread = threadsList.FirstOrDefault();

        //Assign the view model to the database model
        reply.Text = replyView.Text;
        reply.ThreadId = thread.Id;
        reply.UserId = user.Id;
        reply.UserName = user.UserName;

        try
        {
            _context.ForumReplies.Add(reply);
            await _context.SaveChangesAsync();
        }
        catch
        {
            base.StateHasChanged();
        }

        NavManager.NavigateTo(NavManager.Uri, true);

    }
}
