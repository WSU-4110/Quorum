@page "/threadcreation/{ForumParentID:int}"


@using QuorumDB.Models
@inject Quorum.Data.ApplicationDbContext _context
@inject QuorumDB.IUserData _udata
@inject QuorumDB.IForumData _fdata
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject NavigationManager _nav


<h3>ThreadCreator</h3>

<AuthorizeView>
    <Authorized Context="Auth">
        <div class="thread-form">
            <EditForm Model=@thread OnValidSubmit=@HandleValidSubmit>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="ThreadTitle">Thread Title:</label>
                    <InputText id="ThreadTitle" class="form-control" @bind-Value="thread.Title" />
                </div>

                <div class="form-group">
                    <label for="Description">Description:</label>
                    <InputTextArea id="Description" class="form-control" @bind-Value="thread.Description" />
                </div>

                <button class="btn btn-primary" type="submit">Create Thread</button>
            </EditForm>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>Must be a valid user to create a thread</h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    ThreadView threadView = new ThreadView();
    ForumThread thread = new ForumThread();
    Forum parentForum;
    AspNetUser user;

    [Parameter]
    public int ForumParentID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userState = authenticationState.User;
        string userName = userState.Identity.Name;

        if (userState.Identity.IsAuthenticated)
        {
            
        }
    }

    private async void HandleValidSubmit()
    {
        //Assign the view model to the database model
        thread.Title = threadView.Title;
        thread.Description = threadView.Description;
        thread.ForumId = ForumParentID;
        thread.UserId = user.Id;

        try
        {
            _context.ForumThreads.Add(thread);
            await _context.SaveChangesAsync();
        }
        catch
        {
            base.StateHasChanged();
        }

        //q is home page btw
        if (parentForum.Url == "q")
            _nav.NavigateTo("/");
        else
            _nav.NavigateTo(parentForum.Url);
    }
}