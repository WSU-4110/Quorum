@using QuorumDB.Models;
@using Quorum.Data.ViewModels;
@using System.Text;
@inject NavigationManager NavManager;
@inject QuorumDB.IForumData _data;

@page "/q/{forum1}"
@page "/q/{forum1}/{forum2}"
@page "/q/{forum1}/{forum2}/{forum3}"
@page "/q/{forum1}/{forum2}/{forum3}/{forum4}"

<h2>
    @parentForum.Title
</h2>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="#">Home</a></li>
        @foreach (var breadcrumb in BreadCrumbs)
        {
            if (!breadcrumb.Equals(lastBreadCrumb))
            {
                <li class="breadcrumb-item"><a href="@breadcrumb.Url">@breadcrumb.Title</a></li>
            }
            else
            {
                <li class="breadcrumb-item active" aria-current="page">@breadcrumb.Title</li>
            }
        }
    </ol>
</nav>

<div class="forumcontrols">
    <a class="btn btn-outline-dark" href="#" role="button">New Section</a>
    <a class="btn btn-outline-dark" href="#" role="button">New Thread</a>
    @*Insure that there can't be more than four layers*@
    @if (parentForum != null && BreadCrumbs.Count < 4)
    {
        <a class="btn btn-outline-dark" href="forumcreation/@parentForum.Id" role="button">Create SubQuorum</a>
    }
</div>

<div class="panel panel-default">
    <div class="row">
        <div class="column">
            <div class="leftside">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Sub-Quorums</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (forums is null)
                        {
                            <tr>
                                <td>Loading data...</td>
                            </tr>
                        }
                        else
                        {

                            @if (forums.Count == 0)
                            {
                                <tr>
                                    <td>Currently no Quorums</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var forum in forums)
                                {
                                    <tr>
                                        <td><a href="@forum.Url">@forum.Title</a></td>
                                    </tr>
                                }
                            }
                            // Get all the threads below here
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="column">
            <div class="rightside">
                <p>
                    <h1>@parentForum.Description</h1>
                </p>
            </div>
        </div>
    </div>
</div>

@functions{
    [Parameter]
    public string forum1 { get; set; }
    [Parameter]
    public string forum2 { get; set; } = "";
    [Parameter]
    public string forum3 { get; set; } = "";
    [Parameter]
    public string forum4 { get; set; } = "";

    private List<Forum> forums;
    private Forum parentForum;
    private List<BreadCrumb> BreadCrumbs;
    private BreadCrumb lastBreadCrumb = new BreadCrumb();

    private async Task FetchData()
    {
        //Gets the full url. Ex.) q/general/whydoesblazorsuck
        string forumUrl = NavManager.ToBaseRelativePath(NavManager.Uri);

        var forumParentList = await _data.GetForumByURL(forumUrl);

        //Only fetch information if the url is valid
        if (forumParentList.Count != 0)
        {
            parentForum = forumParentList.FirstOrDefault();
            forums = await _data.GetForumsByParentId(parentForum.Id);

            IBreadCrumbData breadCrumbData = new BreadCrumbData();
            breadCrumbData.GetBreadCrumbs(ref BreadCrumbs, forumUrl);

            lastBreadCrumb = BreadCrumbs.LastOrDefault();
        }
        else
        {
            //tell them to screw off
            NavManager.NavigateTo("404");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        parentForum = new Forum(); 
        BreadCrumbs = new List<BreadCrumb>();
        await FetchData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await FetchData();
    }
}
