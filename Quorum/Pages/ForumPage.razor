@using QuorumDB.Models;
@using Quorum.Data.ViewModels;
@using System.Text;
@inject NavigationManager NavManager;
@inject QuorumDB.IForumData _fdata;
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject Quorum.Data.ApplicationDbContext _context
@inject QuorumDB.IUserData _udata
@inject QuorumDB.IThreadData _tdata


@page "/q/{forum1}"
@page "/q/{forum1}/{forum2}"
@page "/q/{forum1}/{forum2}/{forum3}"
@page "/q/{forum1}/{forum2}/{forum3}/{forum4}"

<h2>
    @parentForum.Title
</h2>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="#">Home</a></li>
        @foreach (var breadcrumb in BreadCrumbs)
        {
            if (!breadcrumb.Equals(lastBreadCrumb))
            {
                <li class="breadcrumb-item"><a href="@breadcrumb.Url">@breadcrumb.Title</a></li>
            }
            else
            {
                <li class="breadcrumb-item active" aria-current="page">@breadcrumb.Title</li>
            }
        }
    </ol>
</nav>

<div class="forumcontrols">
    @*Insure that there can't be more than four layers*@
    @if (parentForum != null && BreadCrumbs.Count < 4)
    {
        <a class="btn btn-outline-dark" href="forumcreation/@parentForum.Id" role="button">New Section</a>
    }
    <a class="btn btn-outline-dark" href="#" role="button" data-toggle="modal" data-target="#createThread">New Thread</a>
</div>

<AuthorizeView>
    <Authorized>
        <div class="modal fade" id="createThread" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Create Thread</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="form-group">
                                <label for="title">Title</label>
                                <input type="text" class="form-control" id="title" placeholder="Title" @bind="threadView.Title">
                            </div>
                            <div class="form-group">
                                <label for="message-text" class="col-form-label">Description</label>
                                <textarea class="form-control" id="message-text" placeholder="Message" @bind="threadView.Description"></textarea>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" data-dismiss="modal" @onclick="@HandleValidSubmit">Submit</button>
                    </div>
                </div>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="modal fade" id="createThread" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Create Thread</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <p>Not an authorized user, cannot create a thread</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Dismiss</button>
                    </div>
                </div>
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

<div class="panel panel-default">
    <div class="row">
        <div class="column">
            <div class="leftside">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Sub-Quorums</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (forums is null)
                        {
                            <tr>
                                <td>Loading data...</td>
                            </tr>
                        }
                        else
                        {

                            @if (forums.Count == 0)
                            {
                                <tr>
                                    <td>Currently no Quorums</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var forum in forums)
                                {
                                    <tr>
                                        <td><a href="@forum.Url">@forum.Title</a></td>
                                    </tr>
                                }
                            }
                        }
                    </tbody>
                </table>
                @*Get all the threads below here*@
                <table class="table">
                    <thead>
                        <tr>
                            <th>Threads</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (threads is null)
                        {
                            <tr>
                                <td>Loading Data...</td>
                            </tr>
                        }
                        else
                        {
                            @for (int i = 0 + ((pageNum - 1) * 10); i < (pageNum * 10) && i < threads.Count(); i++)
                            {
                                <tr>
                                    <td>
                                        <a href="/p/@threads[i].Id">@threads[i].Title</a>
                                        <div class="float-right">
                                            @thread.LastActivity.ToString("G")
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
                <ul class="list-group list-group-horizontal">
                    @if (numOfPages > 0)
                    {
                        @if (pageNum != 1)
                        {
                            <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@PrevPage">Prev</button></li>
                            <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@FirstPage">1</button></li>
                            @if (pageNum - 1 > 3)
                            {
                                <li id="replypagination" class="list-group-item">...</li>
                            }
                            @if (pageNum - 1 > 2)
                            {
                                <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@PageBeforePrev">@(pageNum - 2)</button></li>
                            }
                            @if (pageNum > 2)
                            {
                                <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@PrevPage">@(pageNum - 1)</button></li>
                            }
                        }
                        <li id="replypagination" class="list-group-item"><b>@pageNum</b></li>
                        @if (pageNum != numOfPages)
                        {
                            <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@NextPage">@(pageNum + 1)</button></li>
                            @if (numOfPages - pageNum > 2)
                            {
                                <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@PageAfterNext">@(pageNum + 2)</button></li>
                            }
                            @if (numOfPages - pageNum > 3)
                            {
                                <li id="replypagination" class="list-group-item">...</li>
                            }
                            @if (numOfPages - pageNum > 1)
                            {
                                <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@LastPage">@numOfPages</button></li>
                            }
                            <li id="replypagination" class="list-group-item"><button type="button" class="pagbutton" @onclick="@NextPage">Next</button></li>
                        }
                    }
                </ul>
            </div>
        </div>
        <div class="column">
            <div class="rightside">
                <div class="forumdetails">
                    <h5>@parentForum.Title</h5>
                    <p>@parentForum.Description<br />@parentForum.DateCreated</p>
                </div>
            </div>
        </div>
    </div>
</div>

@functions{
    [Parameter]
    public string forum1 { get; set; }
    [Parameter]
    public string forum2 { get; set; } = "";
    [Parameter]
    public string forum3 { get; set; } = "";
    [Parameter]
    public string forum4 { get; set; } = "";

    private int pageNum;
    private int numOfPages;

    private List<Forum> forums;
    private Forum parentForum = new Forum();
    private List<BreadCrumb> BreadCrumbs = new List<BreadCrumb>();
    private BreadCrumb lastBreadCrumb = new BreadCrumb();

    private ThreadView threadView = new ThreadView();
    private ForumThread thread = new ForumThread();
    private AspNetUser user;

    private List<ForumThread> threads;

    private async Task FetchData()
    {
        //Gets the full url. Ex.) q/general/whydoesblazorsuck
        string forumUrl = NavManager.ToBaseRelativePath(NavManager.Uri);

        var forumParentList = await _fdata.GetForumByURL(forumUrl);

        //Only fetch information if the url is valid
        if (forumParentList.Count != 0)
        {
            parentForum = forumParentList.FirstOrDefault();
            forums = await _fdata.GetForumsByParentId(parentForum.Id);

            threads = await _tdata.GetThreadsByForumId(parentForum.Id);

            //Breadcrumbs logic
            BreadCrumbs.Clear();

            List<string> breadCrumbTitle = forumUrl.Split('/').ToList();
            breadCrumbTitle.Remove("q"); //Remove default homepage directory
            for (int i = 0; i < breadCrumbTitle.Count; i++)
            {
                var title = new StringBuilder(breadCrumbTitle[i]);
                title.Replace('-', ' ');
                //Capatalize the first letter
                title[0] = char.ToUpper(title[0]);
                breadCrumbTitle[i] = title.ToString();
            }

            List<string> breadCrumbUrls = new List<string>();
            var forumUrlCopy = forumUrl;

            breadCrumbUrls.Add(forumUrlCopy);
            for (int i = 0; i < breadCrumbTitle.Count - 1; i++)
            {
                var lastSlashIndex = forumUrlCopy.LastIndexOf('/');
                forumUrlCopy = forumUrlCopy.Remove(lastSlashIndex);
                breadCrumbUrls.Add(forumUrlCopy);
            }
            breadCrumbUrls.Reverse();
            //Add the parts into UrlPart container
            for (int i = 0; i < breadCrumbTitle.Count; i++)
                BreadCrumbs.Add(new BreadCrumb() { Title = breadCrumbTitle[i], Url = breadCrumbUrls[i] });
            lastBreadCrumb = BreadCrumbs.LastOrDefault();
        }
        else
        {
            //tell them to screw off
            NavManager.NavigateTo("404");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        //get current user
        AuthenticationState authenticationState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userState = authenticationState.User;
        string userName = userState.Identity.Name;
        var userList = await _udata.GetUserByUserName(userName);
        user = userList.FirstOrDefault();

        await FetchData();

        pageNum = 1;
        numOfPages = threads.Count() / 10;
        if (threads.Count() % 10 != 0)
            numOfPages++;
    }

    protected override async Task OnParametersSetAsync()
    {
        await FetchData();
    }

    private async Task HandleValidSubmit()
    {
        //Assign the view model to the database model
        thread.Title = threadView.Title;
        thread.Description = threadView.Description;
        thread.ForumId = parentForum.Id;
        thread.UserName = user.UserName;
        thread.UserId = user.Id;

        try
        {
            _context.ForumThreads.Add(thread);
            await _context.SaveChangesAsync();
      
            threads = await _tdata.GetThreadsByForumId(parentForum.Id);
            threadView = new ThreadView();

            numOfPages = threads.Count() / 10;
            if (threads.Count() % 10 != 0)
                numOfPages++;
            StateHasChanged();

        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
        }
    }

    private void FirstPage()
    {
        pageNum = 1;
    }

    private void PageBeforePrev()
    {
        pageNum -= 2;
    }

    private void PrevPage()
    {
        pageNum -= 1;
    }

    private void NextPage()
    {
        pageNum += 1;
    }

    private void PageAfterNext()
    {
        pageNum += 2;
    }

    private void LastPage()
    {
        pageNum = numOfPages;
    }
}
