@page "/profile"
@using BlazorInputFile
@using System.IO;
@inject AuthenticationStateProvider _auth;
@inject IJSRuntime _js;
<h1>Profile picture upload</h1>

<h1>Drag/drop file viewer</h1>

@*<img id="demo" src="Photos\khalid4747.png" />*@

<div class="card-body">
    <div id="main-cropper"></div>
    <InputFile id="select" class="form-control" accept="image/*"/>
    @if (file != null)
    {
        <span>Loaded @((100.0 * file.Data.Position / file.Size).ToString("0"))%</span>
    }
    <button id="btnupload" style="margin-top: 10px;" name="btnupload" class="btn btn-success" @onclick="GetFile">Crop</button>
</div>


@*<div>
    <InputFile OnChange="ViewFile" />
    @status
    @if (file != null)
    {
        <span>Loaded @((100.0 * file.Data.Position / file.Size).ToString("0"))%</span>
    }
</div>*@

@if (!string.IsNullOrEmpty(imageDataUri))
{
    <img class="my-image" src="@imageDataUri" />
}

@code {

    const string DefaultStatus = "Drop a file here or click choose a file";
    const int MaxFileSizeHumanReadable = 10; // 10MB
    const int MaxFileSize = MaxFileSizeHumanReadable * 1024 * 1024; //To bytes

    string status = DefaultStatus;
    private IFileListEntry file;
    string imageDataUri;

    private string username;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await _auth.GetAuthenticationStateAsync();
        username = authstate.User.Identity.Name;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _js.InvokeVoidAsync("croppie");
        }
    }

    async Task GetFile()

    {
        var formData = await _js.InvokeAsync<string>("getCroppie");

        Console.WriteLine(formData.Length);

        //var imageFile = await file.ToImageFileAsync(format, 2560, 2560);
        //var ms = new MemoryStream();
        //await imageFile.Data.CopyToAsync(ms);

        //// Make a data URL so we can display it
        //imageDataUri = $"data:{format};base64,{Convert.ToBase64String(blob.GetBytes())}";
        imageDataUri = $"{formData}";


    }

    async Task submitPhoto()
    {
        //If a profile pic already exists, delete it
        string searchTerm = $"{username}*";
        var img = Directory.GetFiles("Photos", searchTerm);
        if (img.Length > 0)
        {
            File.Delete(img[0]);
        }

        var path = Path.Combine("Photos", username + "." + file.Type.Split('/')[1]);

        using (var stream = new FileStream(path, FileMode.Create))
        {
            await file.Data.CopyToAsync(stream);
        }

        status = DefaultStatus;
    }
}