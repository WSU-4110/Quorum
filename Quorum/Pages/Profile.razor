@page "/profile"
@using System.IO;
@inject AuthenticationStateProvider _auth;
@inject IJSRuntime _js;
<h3>Profile picture upload</h3>

<div class="card-body">
    <div id="main-cropper"></div>
    <BlazorInputFile.InputFile OnChange="HandleSelection" id="select" accept="image/*" />
    @*<input type="file" class="form-control" value="Choose Image" accept="image/*">*@
    @if (submittedImage)
    {
        <button @onclick="Submit" name="btnupload" class="btn btn-success">Submit</button>
    }
    @if (imageFile != null){
        <div>Loaded @((100.0 * imageFile.Data.Position / imageFile.Size).ToString("0"))%</div>
    }

    <p>@status</p>
</div>


@code {

    const string DefaultStatus = "Drop a file here or click choose a file";
    const int MaxFileSizeMB= 15; // 15MB
    const int MaxFileSize = MaxFileSizeMB * 1024 * 1024; //To bytes

    string status = DefaultStatus;
    IFileListEntry[] selectedFiles;
    IFileListEntry imageFile;
    bool submittedImage;

    private string username;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await _auth.GetAuthenticationStateAsync();
        username = authstate.User.Identity.Name;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _js.InvokeVoidAsync("croppieFunctions.init");
        }
        firstRender = false;
        return base.OnAfterRenderAsync(firstRender);
    }

    void HandleSelection(IFileListEntry[] files)
    {
        selectedFiles = files;
        submittedImage = true;
    }

    async Task Submit()
    {
        //Set the croppie file and
        var uncroppedImage = selectedFiles.FirstOrDefault();

        if (uncroppedImage != null)
        {
            // Load as an image file in memory
            var format = uncroppedImage.Type;
            imageFile = await uncroppedImage.ConvertCroppieToImageFileAsync(format);

            //Event listener for data change
            imageFile.OnDataRead += (sender, eventArgs) => InvokeAsync(StateHasChanged);

            var ms = new MemoryStream();
            await imageFile.Data.CopyToAsync(ms);

            // Make a data URL so we can display it

            status = $"Finished loading {ms.Length} bytes from {imageFile.Name}";

            //If a profile pic already exists, delete it
            string searchTerm = $"{username}*";
            var img = Directory.GetFiles("Photos", searchTerm);
            if (img.Length > 0)
            {
                File.Delete(img[0]);
            }
            string imageName = $"{username}-{DateTime.Now.ToString("yyyyMMdd-HHmmss")}.{imageFile.Type.Split('/')[1]}";
            var path = Path.Combine("Photos", imageName);

            await File.WriteAllBytesAsync(path, ms.ToArray());
            await _js.InvokeVoidAsync("croppieFunctions.updateAvatarImage", $"Photos/{imageName}");
        }
    }
}