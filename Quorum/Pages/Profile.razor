@page "/profile"
@using BlazorInputFile
@using System.IO;
@inject AuthenticationStateProvider _auth;
@inject IJSRuntime _js;
<h3>Profile picture upload</h3>


@*<img id="demo" src="Photos\khalid4747.png" />*@

<div class="card-body">
    <div id="main-cropper"></div>
    <InputFile OnChange="GetFile" class="form-control" accept="image/png,image/jpeg" />
    @if (file != null)
    {
        <span>Loaded @((100.0 * file.Data.Position / file.Size).ToString("0"))%</span>
    }

    @if (!string.IsNullOrEmpty(imageDataUri))
    {
        <img class="my-image" style="max-width:600px; max-height:600px;" src="@imageDataUri" />
    }
</div>


@code 
{
    //start of added code
    interface Command 
    { 
    public void execute(); 
    } 
    class FileDelete implements Command
    {
        private IFileListEntry file;
        public deleter(var [] x)
        {
            file.Delete(x[0]);
        }
    }
    //end of added code
    const string DefaultStatus = "Drop a file here or click choose a file";
    const int MaxFileSizeMB= 10; // 10MB
    const int MaxFileSize = MaxFileSizeMB * 1024 * 1024; //To bytes

    string status = DefaultStatus;
    string imageDataUri;

    private string username;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await _auth.GetAuthenticationStateAsync();
        username = authstate.User.Identity.Name;
    }
    async Task GetFile(IFileListEntry[] files)
    {
        Filedelete filer=new Filedelete;
        filer.file = files.FirstOrDefault();
        if (file != null)
        {
            file.OnDataRead += (sender, eventArgs) => InvokeAsync(StateHasChanged);
            var imageFile = await file.ToImageFileAsync(file.Type, 800, 600);

            var ms = new MemoryStream();
            await imageFile.Data.CopyToAsync(ms);

            imageDataUri = $"data:{file.Type};base64,{Convert.ToBase64String(ms.ToArray())}";

            //If a profile pic already exists, delete it
            string searchTerm = $"{username}*";
            var img = Directory.GetFiles("Photos", searchTerm);
            if (img.Length > 0)
            {
                filer.deleter(img); //changed to be command design
            }

            var path = Path.Combine("Photos", username + "." + file.Type.Split('/')[1]);

            using (var stream = new FileStream(path, FileMode.Create))
            {
                await file.Data.CopyToAsync(stream);
            }

            status = DefaultStatus;
        }

    }
}
