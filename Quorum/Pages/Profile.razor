@page "/profile"
@page "/profile/{UserName}"
@using System.IO
@inject AuthenticationStateProvider _auth
@inject IJSRuntime _js
@inject UserState _userState
@inject IUserData _uData
@inject NavigationManager _nav;

@if (searchForUser)
{
    if (searchUserName != null)
    {
        <h1>@UserName</h1>
        <h4>@searchUserName.DateRegistered</h4>
        <h4>@registeredTime.ToString("F")</h4>
        <h4>
            Time ago <span class="oi oi-clock"></span>: <time class="timeago" datetime="@registeredTime.ToString("u")"></time>
        </h4>
        <img src="@searchUserName.AvatarUrl"/>
    }
    else
    {
        <h2>User: @UserName not found</h2>
    }
}
else
{
    <h3>Profile picture upload</h3>

    <div class="card-body">
        <div id="main-cropper"></div>
        <BlazorInputFile.InputFile OnChange="HandleSelection" id="select" accept="image/*" />
        @*<input type="file" class="form-control" value="Choose Image" accept="image/*">*@
        @if (submittedImage)
        {
            <button @onclick="Submit" name="btnupload" class="btn btn-success">Submit</button>
        }
        @if (imageFile != null)
        {
            <div>Loaded @((100.0 * imageFile.Data.Position / imageFile.Size).ToString("0"))%</div>
        }
        <p>@status</p>
    </div>
}


@code {
    [Parameter]
    public string UserName { get; set; }
    AspNetUser searchUserName;
    DateTimeOffset registeredTime;

    const string DefaultStatus = "Drop a file here or click choose a file";
    const int MaxFileSizeMB = 15; // 15MB
    const int MaxFileSize = MaxFileSizeMB * 1024 * 1024; //To bytes

    string status = DefaultStatus;
    IFileListEntry[] selectedFiles;
    IFileListEntry imageFile;
    bool submittedImage;
    bool searchForUser = false;
    bool converteDate = false;

    private string localUserName;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await _auth.GetAuthenticationStateAsync();
        localUserName = authstate.User.Identity.Name;

        if (!string.IsNullOrEmpty(UserName))
        {
            searchForUser = true;
            var userList = await _uData.GetUserByUserName(UserName);
            if (userList.Count > 0)
            {
                searchUserName = userList.FirstOrDefault();
            }
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _js.InvokeVoidAsync("croppieFunctions.init");
        }
        else if(converteDate == false)
        {
            converteDate = true;
            searchUserName.DateRegistered = await _userState.GetLocalDateTime(searchUserName.DateRegistered);
            registeredTime = await _userState.GetLocalDateTime(searchUserName.DateRegistered);
            StateHasChanged();
            await _js.InvokeVoidAsync("general.initTimeAgo");
        }
        base.OnAfterRender(firstRender);
    }

    void HandleSelection(IFileListEntry[] files)
    {
        selectedFiles = files;
        submittedImage = true;
    }

    async Task Submit()
    {
        //Set the croppie file and
        var uncroppedImage = selectedFiles.FirstOrDefault();

        if (uncroppedImage != null)
        {
            // Load as an image file in memory
            var format = uncroppedImage.Type;
            imageFile = await uncroppedImage.ConvertCroppieToImageFileAsync(format);

            //Event listener for data change
            imageFile.OnDataRead += (sender, eventArgs) => InvokeAsync(StateHasChanged);

            var ms = new MemoryStream();
            await imageFile.Data.CopyToAsync(ms);

            // Make a data URL so we can display it

            status = $"Finished loading {ms.Length} bytes from {imageFile.Name}";

            //If a profile pic already exists, delete it
            string searchTerm = $"{localUserName}*";
            var img = Directory.GetFiles("Photos", searchTerm);
            if (img.Length > 0)
            {
                File.Delete(img[0]);
            }
            string imageName = $"{localUserName}-{DateTime.Now.ToString("yyyyMMdd-HHmmss")}.{imageFile.Type.Split('/')[1]}";
            var path = Path.Combine("Photos", imageName);

            await File.WriteAllBytesAsync(path, ms.ToArray());
            //await _js.InvokeVoidAsync("croppieFunctions.updateAvatarImage", $"Photos/{imageName}");

            //Update userprofile with the correct image path
            //When using configure await = false it doesnt wait for the process
            await _uData.SetUserAvatar(localUserName, $"Photos/{imageName}").ConfigureAwait(false);
            await InvokeAsync(_userState.NotifyAvatarUpdate).ConfigureAwait(false);
        }
    }
}