@page "/forumcreation/{ForumParentID:int}"

@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject Quorum.Data.ApplicationDbContext _context
@inject IForumData _fdata;
@inject IUserData _udata
@inject NavigationManager _nav;

<h3>Forum Creation Page</h3>
<AuthorizeView>
    <Authorized Context="Auth">
        <div class="forum-form col-8">
            <EditForm Model=@forumView OnValidSubmit=@HandleValidSubmit>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="ForumTitle">Forum Title:</label>
                    <InputText id="ForumTitle" class="form-control" @bind-Value="forumView.Title" />
                </div>

                <div class="form-group">
                    <label for="Description">Description:</label>
                    <InputTextArea id="Description" class="form-control" @bind-Value="forumView.Description" />
                </div>

                <div class="form-group">
                    <button class="btn btn-primary" type="submit">Create Forum</button>
                </div>
            </EditForm>
        </div>
    </Authorized>
    <NotAuthorized>
        <h1>Must be a valid user to create a forum</h1>
    </NotAuthorized>
</AuthorizeView>

@code 
{
    ForumView forumView = new ForumView();
    Forum forum = new Forum();
    Forum parentForum;
    AspNetUser user;

    [Parameter]
    public int ForumParentID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userState = authenticationState.User;
        string userName = userState.Identity.Name;

        if (userState.Identity.IsAuthenticated)
        {
            var parentForumList = await _fdata.GetForumById(ForumParentID);

            //If there are no forums by that id, then boot them out
            if (parentForumList.Count == 0)
                _nav.NavigateTo("404");

            parentForum = parentForumList.FirstOrDefault();
            string parentUrl = parentForum.Url;

            int count = 0;
            foreach (char c in parentUrl)
                if (c == '/') count++;
            if (count > 3)
            {
                //reached maximum layers
                _nav.NavigateTo("404");
            }

            forumView.ParentForumTitle = parentForum.Title;

            //Get user by username which contains GUID. We can do authentication later down the line
            var userList = await _udata.GetUserByUserName(userName);
            user = userList.FirstOrDefault();
        }
    }

    private async void HandleValidSubmit()
    {
        //Assign the view model to the database model
        forum.Title = forumView.Title;
        forum.Description = forumView.Description;
        forum.IsPrivate = false;
        forum.ForumId = ForumParentID;

        forum.Url = $"{parentForum.Url}/{forumView.Title.Replace(" ", "-").ToLower()}";
        forum.UserId = user.Id;

        try
        {
            _context.Forums.Add(forum);
            await _context.SaveChangesAsync();
        }
        catch
        {
            base.StateHasChanged();
        }

        //q is home page
        if (parentForum.Url == "q")
            _nav.NavigateTo("/");
        else
            _nav.NavigateTo(parentForum.Url);
    }
}