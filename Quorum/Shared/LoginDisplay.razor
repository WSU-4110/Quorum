@inject AuthenticationStateProvider _auth
@inject UserState _userState
@inject NavigationManager _nav
@using System.IO

<AuthorizeView>
    <Authorized>
        <a href="profile" class="avatar btn">@context.User.Identity.Name</a>
        <div class="avatar nav-item dropdown col-md-2">
            <div class="avatar-icon nav-link dropdown-toggle" id="navdrop" role="button" data-toggle="dropdown" data-hover="dropdown">
                @if (imgUrl != String.Empty)
                {
                    <img src="@imgUrl" class="rounded-circle" id="avatar-icon" width="48" height="48">
                }
                else
                {
                    <span class="text-avatar" id="avatar-icon" width="48" height="48">@context.User.Identity.Name.ToUpper()[0]</span>
                }
                <a></a> @*Drop down arrow*@
            </div>
            <div class="dropdown-menu" aria-labelledby="navdrop">
                <a href="test" class="dropdown-item">Chat</a>
                <a href="Identity/Account/manage" class="dropdown-item">Settings</a>
                <form method="post" action="Identity/Account/LogOut">
                    <button type="submit" class="dropdown-item">Log out</button>
                </form>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <a href="Identity/Account/Register" class="btn">Register</a>
        <button class="btn btn-login" @onclick="loginWithReturnUrl">Log in</button>
    </NotAuthorized>
</AuthorizeView>

@code {
    string imgUrl = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await loadImage();
    }

    protected async Task loadImage()
    {
        var authstate = await _auth.GetAuthenticationStateAsync();
        string username = authstate.User.Identity.Name;
        string searchTerm = $"{username}*";
        var img = Directory.GetFiles("Photos", searchTerm);
        if (img.Length > 0)
        {
            imgUrl = img[0];
        }
    }

    protected override void OnInitialized()
    {
        _userState.OnChange += HandleChange;
    }

    public void HandleChange(object sender, EventArgs args)
    {
        Task.FromResult(loadImage());
        StateHasChanged();
    }

    public void loginWithReturnUrl()
    {
        _nav.NavigateTo($"Identity/Account/Login?returnUrl=/{_nav.ToBaseRelativePath(_nav.Uri)}", true);
    }

    public void Dispose()
    {
        _userState.OnChange -= HandleChange;
    }
}